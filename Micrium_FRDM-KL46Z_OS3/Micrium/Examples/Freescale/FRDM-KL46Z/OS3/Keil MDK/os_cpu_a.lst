


ARM Macro Assembler    Page 1 


    1 00000000         #line   1                "..\\..\\..\\..\\..\\Software\\
uCOS-III\\Ports\\ARM-Cortex-M0\\Generic\\RealView\\os_cpu_a.s"
    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       I
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2012,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       0 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V3.04.03
   12 00000000         ; By        : JJL
   13 00000000         ;             MD
   14 00000000         ;
   15 00000000         ; For       : ARMv6M Cortex-M0
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : RealView Development Suite
   18 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   19 00000000         ;             ARM Developer Suite (ADS)
   20 00000000         ;             Keil uVision
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;                                           PUBLIC FUNCT
                       IONS
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         
   27 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   28 00000000                 EXTERN           OSPrioCur
   29 00000000                 EXTERN           OSPrioHighRdy
   30 00000000                 EXTERN           OSTCBCurPtr
   31 00000000                 EXTERN           OSTCBHighRdyPtr
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000                 EXTERN           OS_CPU_ExceptStkBase
   35 00000000         
   36 00000000         
   37 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   38 00000000                 EXPORT           OSCtxSw
   39 00000000                 EXPORT           OSIntCtxSw
   40 00000000                 EXPORT           OS_CPU_PendSVHandler
   41 00000000         
   42 00000000         ;*******************************************************
                       *************************************************
   43 00000000         ;                                                EQUATES



ARM Macro Assembler    Page 2 


                       
   44 00000000         ;*******************************************************
                       *************************************************
   45 00000000         
   46 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   47 00000000 E000ED20 
                       NVIC_SYSPRI14
                               EQU              0xE000ED20  ; System priority r
                                                            egister (priority 1
                                                            4).
   48 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest).
   49 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   56 00000000                 THUMB
   57 00000000                 REQUIRE8
   58 00000000                 PRESERVE8
   59 00000000         
   60 00000000         
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         ;                                          START MULTITA
                       SKING
   63 00000000         ;                                       void OSStartHigh
                       Rdy(void)
   64 00000000         ;
   65 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   66 00000000         ;              the first task to start.
   67 00000000         ;
   68 00000000         ;           2) OSStartHighRdy() MUST:
   69 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   70 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   71 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base;
   72 00000000         ;              d) Set OSRunning to TRUE;
   73 00000000         ;              e) Trigger PendSV exception;
   74 00000000         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
   75 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *************************************************
   76 00000000         
   77 00000000         OSStartHighRdy
   78 00000000 481C            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
   79 00000002 491D            LDR              R1, =NVIC_PENDSV_PRI
   80 00000004 6001            STR              R1, [R0]    ; Not storing entir
                                                            e byte with STRB to
                                                             avoid error
   81 00000006         
   82 00000006 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
   83 00000008 F380 8809       MSR              PSP, R0
   84 0000000C         
   85 0000000C 481B            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
   86 0000000E 6801            LDR              R1, [R0]
   87 00000010 F381 8808       MSR              MSP, R1
   88 00000014         
   89 00000014 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   90 00000016 491B            LDR              R1, =NVIC_PENDSVSET
   91 00000018 6001            STR              R1, [R0]
   92 0000001A         
   93 0000001A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   94 0000001C         
   95 0000001C         OSStartHang
   96 0000001C E7FE            B                OSStartHang ; Should never get 
                                                            here
   97 0000001E         
   98 0000001E         
   99 0000001E         ;*******************************************************
                       *************************************************
  100 0000001E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  101 0000001E         ;                                           void OSCtxSw
                       (void)
  102 0000001E         ;
  103 0000001E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  104 0000001E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  105 0000001E         ;*******************************************************
                       *************************************************
  106 0000001E         
  107 0000001E         OSCtxSw
  108 0000001E 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  109 00000020 4918            LDR              R1, =NVIC_PENDSVSET



ARM Macro Assembler    Page 4 


  110 00000022 6001            STR              R1, [R0]
  111 00000024 4770            BX               LR
  112 00000026         
  113 00000026         ;*******************************************************
                       *************************************************
  114 00000026         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  115 00000026         ;                                         void OSIntCtxS
                       w(void)
  116 00000026         ;
  117 00000026         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  118 00000026         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  119 00000026         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  120 00000026         ;*******************************************************
                       *************************************************
  121 00000026         
  122 00000026         OSIntCtxSw
  123 00000026 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  124 00000028 4916            LDR              R1, =NVIC_PENDSVSET
  125 0000002A 6001            STR              R1, [R0]
  126 0000002C 4770            BX               LR
  127 0000002E         
  128 0000002E         ;*******************************************************
                       *************************************************
  129 0000002E         ;                                         HANDLE PendSV 
                       EXCEPTION
  130 0000002E         ;                                     void OS_CPU_PendSV
                       Handler(void)
  131 0000002E         ;
  132 0000002E         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  133 0000002E         ;              context switches with Cortex-M0.  This is
                        because the Cortex-M0 auto-saves half of the
  134 0000002E         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  135 0000002E         ;              saving of R4-R7 is required and fixing up
                        the stack pointers.  Using the PendSV exception
  136 0000002E         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  137 0000002E         ;              a thread or occurs due to an interrupt or
                        exception.
  138 0000002E         ;
  139 0000002E         ;           2) Pseudo-code is:
  140 0000002E         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  141 0000002E         ;              b) Save remaining regs R4-R7 on process s
                       tack;
  142 0000002E         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  143 0000002E         ;              d) Call OSTaskSwHook();
  144 0000002E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  145 0000002E         ;              f) Get current ready thread TCB, OSTCBCur



ARM Macro Assembler    Page 5 


                       Ptr = OSTCBHighRdyPtr;
  146 0000002E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  147 0000002E         ;              h) Restore R4-R7 from new process stack;
  148 0000002E         ;              i) Perform exception return which will re
                       store remaining context.
  149 0000002E         ;
  150 0000002E         ;           3) On entry into PendSV handler:
  151 0000002E         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  152 0000002E         ;                 xPSR, PC, LR, R12, R0-R3
  153 0000002E         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  154 0000002E         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  155 0000002E         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  156 0000002E         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  157 0000002E         ;
  158 0000002E         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  159 0000002E         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  160 0000002E         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  161 0000002E         ;*******************************************************
                       *************************************************
  162 0000002E         
  163 0000002E         OS_CPU_PendSVHandler
  164 0000002E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  165 00000030 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  166 00000034 2800            CMP              R0, #0
  167 00000036 D005            BEQ              OS_CPU_PendSVHandler_nosave ; e
                                                            quivalent code to C
                                                            BZ from M3 arch to 
                                                            M0 arch
  168 00000038         ; Except that it does not change the condition code flag
                       s
  169 00000038 3810            SUBS             R0, R0, #0x10 ; Adjust stack po
                                                            inter to where memo
                                                            ry needs to be stor
                                                            ed to avoid overwri
                                                            ting
  170 0000003A C0F0            STM              R0!, {R4-R7} ; Stores 4 4-byte 
                                                            registers, default 
                                                            increments SP after
                                                             each storing
  171 0000003C 3810            SUBS             R0, R0, #0x10 ; STM does not au
                                                            tomatically call ba
                                                            ck the SP to initia
                                                            l location so we mu
                                                            st do this manually
                                                            
  172 0000003E         
  173 0000003E 4912            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-



ARM Macro Assembler    Page 6 


                                                            >OSTCBStkPtr = SP;
  174 00000040 6809            LDR              R1, [R1]
  175 00000042 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  176 00000044         
  177 00000044         ; At this point, entire context of process has been save
                       d
  178 00000044         OS_CPU_PendSVHandler_nosave
  179 00000044 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  180 00000046 4811            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  181 00000048 4780            BLX              R0
  182 0000004A BC01            POP              {R0}
  183 0000004C 4686            MOV              R14, R0
  184 0000004E         
  185 0000004E 4810            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  186 00000050 4910            LDR              R1, =OSPrioHighRdy
  187 00000052 780A            LDRB             R2, [R1]
  188 00000054 7002            STRB             R2, [R0]
  189 00000056         
  190 00000056 480C            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  191 00000058 490F            LDR              R1, =OSTCBHighRdyPtr
  192 0000005A 680A            LDR              R2, [R1]
  193 0000005C 6002            STR              R2, [R0]
  194 0000005E         
  195 0000005E 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  196 00000060         
  197 00000060 C8F0            LDM              R0!, {R4-R7} ; Restore R4-R7 fr
                                                            om new process stac
                                                            k
  198 00000062         
  199 00000062 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  200 00000066         
  201 00000066 4670            MOV              R0,  R14
  202 00000068 2104            MOVS             R1,  #0x04  ; Immediate move to
                                                             register
  203 0000006A 4308            ORRS             R0,  R1     ; Ensure exception 
                                                            return uses process
                                                             stack
  204 0000006C 4686            MOV              R14, R0
  205 0000006E B662            CPSIE            I
  206 00000070 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  207 00000072         
  208 00000072 00 00           ALIGN
  209 00000074         
  210 00000074                 END
              E000ED20 
              00FF0000 
              00000000 
              E000ED04 



ARM Macro Assembler    Page 7 


              10000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpreproc --diag_suppress=9931 --cpu=Cortex-M0+ -
-apcs=interwork --depend=.\output\os_cpu_a.d -o.\output\os_cpu_a.o -I.. -I"C:\U
sers\Administrator\Desktop\learning_20151113\KL46_StepCounter\Micrium_FRDM-KL46
Z_OS3\Micrium\Examples\Freescale\FRDM-KL46Z\OS3\Keil MDK\RTE" -ID:\Keil_v5\ARM\
PACK\Keil\Kinetis_KLxx_DFP\1.8.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include 
--predefine="__UVISION_VERSION SETA 515" --predefine="MKL46Z256xxx4 SETA 1" --l
ist=.\os_cpu_a.lst ..\..\..\..\..\Software\uCOS-III\Ports\ARM-Cortex-M0\Generic
\RealView\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 55 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      None
Comment: .text unused
OSCtxSw 0000001E

Symbol: OSCtxSw
   Definitions
      At line 107 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 38 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 00000026

Symbol: OSIntCtxSw
   Definitions
      At line 122 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 39 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSIntCtxSw used once
OSStartHang 0000001C

Symbol: OSStartHang
   Definitions
      At line 95 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 96 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSStartHang used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 77 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 37 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 0000002E

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 163 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 40 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OS_CPU_PendSVHandler used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OS_CPU_PendSVHandler_nosave 00000044

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 178 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 167 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OS_CPU_PendSVHandler_nosave used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 46 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 89 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
      At line 108 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
      At line 123 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 49 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 90 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
      At line 109 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
      At line 124 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 48 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 79 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED20

Symbol: NVIC_SYSPRI14
   Definitions
      At line 47 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 78 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 28 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 185 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 29 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 186 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 27 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 30 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 173 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
      At line 190 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 31 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 191 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: OSTCBHighRdyPtr used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 180 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Co
rtex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 34 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
   Uses
      At line 85 in file ..\\..\\..\\..\\..\\Software\\uCOS-III\\Ports\\ARM-Cor
tex-M0\\Generic\\RealView\\os_cpu_a.s
Comment: OS_CPU_ExceptStkBase used once
8 symbols
353 symbols in table
